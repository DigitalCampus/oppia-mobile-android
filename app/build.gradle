import com.android.build.api.dsl.ManagedVirtualDevice

apply plugin: 'com.android.application'
apply from: '../jacoco.gradle'
apply from: '../sonarqube.gradle'
apply plugin: 'kotlin-android'

repositories {
    maven { url "https://jitpack.io" }
}

def version_code = 111
def version_name = "7.4.6"

android {

    Properties runtimeProps = new Properties()
    runtimeProps.load(new FileInputStream(rootProject.file('oppia-default.properties')))

    def oppiaPropsFile = rootProject.file('custom.properties')
    if (oppiaPropsFile.canRead()) {
        logger.lifecycle('Fetching properties from external file')
        runtimeProps.load(new FileInputStream(oppiaPropsFile))
    } else {
        logger.error('No properties file found. Using default values.')
    }

    compileSdk 33

    defaultConfig {
        versionCode version_code
        versionName version_name

        applicationId "org.digitalcampus.mobile.learning"

        minSdk 21
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'
        testInstrumentationRunnerArguments coverage: 'true'
        testInstrumentationRunnerArguments useTestStorageService: 'true'

        vectorDrawables.useSupportLibrary = true

        def interfaceLangs = runtimeProps.getProperty('INTERFACE_LANGUAGE_OPTIONS').split(",")
        resConfigs interfaceLangs
// Language region format in android resources requires 'r' char
        interfaceLangs.eachWithIndex { lang, index -> interfaceLangs[index] = lang.replace("-", "-r")}
        //        resConfigs "en", "es", "ar", "fi", "fr", "hi", "ur-rPK", "am-rET", "om-rET"

    }

    packagingOptions {
        resources {
            excludes += ['META-INF/LICENSE.txt', 'META-INF/NOTICE.txt', 'README.md']
        }
    }

    lint {
        checkReleaseBuilds true
        // Disable checks for String translations
        disable 'MissingTranslation', 'ExtraTranslation'
    }

    compileOptions {

        // Configure to use Java8 features like try-with-resources, lambdas...
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8

        // Flag to enable support for the new language Java 8+ APIs: time, functional, concurrent...
        coreLibraryDesugaringEnabled true
    }

    buildTypes {

        all {
            //Define all the constant values that depend on the config properties

            def analyticsLibrary = "none"
            if (runtimeProps.containsKey('ANALYTICS_LIBRARY')){
                analyticsLibrary = runtimeProps['ANALYTICS_LIBRARY']
                if (analyticsLibrary == ""){ analyticsLibrary = "none" }
            }
            if (analyticsLibrary == "none"){
                logger.error('No analytics library configured, will use empty value')
            }

            buildConfigField "String", "ANALYTICS_LIBRARY", "\"" + analyticsLibrary + "\""
            buildConfigField "String", "COUNTLY_APP_KEY", "\"" + runtimeProps.getProperty('COUNTLY_APP_KEY','') + "\""
            buildConfigField "String", "COUNTLY_SERVER_URL", "\"" + runtimeProps.getProperty('COUNTLY_SERVER_URL','') + "\""

            buildConfigField "boolean", "ADMIN_PROTECT_SETTINGS", runtimeProps['ADMIN_PROTECT_SETTINGS']
            buildConfigField "boolean", "ADMIN_PROTECT_ADVANCED_SETTINGS", runtimeProps['ADMIN_PROTECT_ADVANCED_SETTINGS']
            buildConfigField "boolean", "ADMIN_PROTECT_SECURITY_SETTINGS", runtimeProps['ADMIN_PROTECT_SECURITY_SETTINGS']
            buildConfigField "boolean", "ADMIN_PROTECT_SERVER", runtimeProps['ADMIN_PROTECT_SERVER']
            buildConfigField "boolean", "ADMIN_PROTECT_ACTIVITY_SYNC", runtimeProps['ADMIN_PROTECT_ACTIVITY_SYNC']
            buildConfigField "boolean", "ADMIN_PROTECT_ACTIVITY_EXPORT", runtimeProps['ADMIN_PROTECT_ACTIVITY_EXPORT']
            buildConfigField "boolean", "ADMIN_PROTECT_COURSE_DELETE", runtimeProps['ADMIN_PROTECT_COURSE_DELETE']
            buildConfigField "boolean", "ADMIN_PROTECT_COURSE_RESET", runtimeProps['ADMIN_PROTECT_COURSE_RESET']
            buildConfigField "boolean", "ADMIN_PROTECT_COURSE_INSTALL", runtimeProps['ADMIN_PROTECT_COURSE_INSTALL']
            buildConfigField "boolean", "ADMIN_PROTECT_COURSE_UPDATE", runtimeProps['ADMIN_PROTECT_COURSE_UPDATE']

            buildConfigField "boolean", "ADMIN_PROTECT_NOTIFICATIONS", runtimeProps['ADMIN_PROTECT_NOTIFICATIONS']
            buildConfigField "boolean", "ADMIN_PROTECT_ENABLE_REMINDER_NOTIFICATIONS", runtimeProps['ADMIN_PROTECT_ENABLE_REMINDER_NOTIFICATIONS']
            buildConfigField "boolean", "ADMIN_PROTECT_REMINDER_INTERVAL", runtimeProps['ADMIN_PROTECT_REMINDER_INTERVAL']
            buildConfigField "boolean", "ADMIN_PROTECT_REMINDER_DAYS", runtimeProps['ADMIN_PROTECT_REMINDER_DAYS']
            buildConfigField "boolean", "ADMIN_PROTECT_REMINDER_TIME", runtimeProps['ADMIN_PROTECT_REMINDER_TIME']

            buildConfigField "boolean", "MENU_ALLOW_LOGOUT", runtimeProps['MENU_ALLOW_LOGOUT']
            buildConfigField "boolean", "MENU_ALLOW_EDIT_PROFILE", runtimeProps['MENU_ALLOW_EDIT_PROFILE']
            buildConfigField "boolean", "MENU_ALLOW_CHANGE_PASSWORD", runtimeProps['MENU_ALLOW_CHANGE_PASSWORD']
            buildConfigField "boolean", "MENU_ALLOW_MONITOR", runtimeProps['MENU_ALLOW_MONITOR']
            buildConfigField "boolean", "MENU_ALLOW_SETTINGS", runtimeProps['MENU_ALLOW_SETTINGS']
            buildConfigField "boolean", "MENU_ALLOW_LANGUAGE", runtimeProps['MENU_ALLOW_LANGUAGE']
            buildConfigField "boolean", "MENU_ALLOW_SYNC", runtimeProps['MENU_ALLOW_SYNC']
            buildConfigField "boolean", "MENU_ALLOW_COURSE_DOWNLOAD", runtimeProps['MENU_ALLOW_COURSE_DOWNLOAD']
            buildConfigField "boolean", "SESSION_EXPIRATION_ENABLED", runtimeProps['SESSION_EXPIRATION_ENABLED']
            buildConfigField "boolean", "OFFLINE_REGISTER_ENABLED", runtimeProps['OFFLINE_REGISTER_ENABLED']
            buildConfigField "boolean", "DELETE_ACCOUNT_ENABLED", runtimeProps['DELETE_ACCOUNT_ENABLED']
            buildConfigField "int", "SESSION_EXPIRATION_TIMEOUT", runtimeProps['SESSION_EXPIRATION_TIMEOUT']
            buildConfigField "int", "DOWNLOAD_COURSES_DISPLAY", runtimeProps['DOWNLOAD_COURSES_DISPLAY']
            buildConfigField "boolean", "SHOW_COURSE_DESCRIPTION", runtimeProps['SHOW_COURSE_DESCRIPTION']

            buildConfigField "boolean", "METADATA_INCLUDE_NETWORK", runtimeProps['METADATA_INCLUDE_NETWORK']
            buildConfigField "boolean", "METADATA_INCLUDE_APP_INSTANCE_ID", runtimeProps['METADATA_INCLUDE_APP_INSTANCE_ID']
            buildConfigField "boolean", "METADATA_INCLUDE_MANUFACTURER_MODEL", runtimeProps['METADATA_INCLUDE_MANUFACTURER_MODEL']
            buildConfigField "boolean", "METADATA_INCLUDE_WIFI_ON", runtimeProps['METADATA_INCLUDE_WIFI_ON']
            buildConfigField "boolean", "METADATA_INCLUDE_NETWORK_CONNECTED", runtimeProps['METADATA_INCLUDE_NETWORK_CONNECTED']
            buildConfigField "boolean", "METADATA_INCLUDE_BATTERY_LEVEL", runtimeProps['METADATA_INCLUDE_BATTERY_LEVEL']

            buildConfigField "String", "GAMIFICATION_MEDIA_CRITERIA", "\"" + runtimeProps['GAMIFICATION_MEDIA_CRITERIA'] + "\""
            buildConfigField "int", "GAMIFICATION_DEFAULT_MEDIA_THRESHOLD", runtimeProps['GAMIFICATION_DEFAULT_MEDIA_THRESHOLD']
            buildConfigField "boolean", "GAMIFICATION_MEDIA_SHOULD_REACH_END", runtimeProps['GAMIFICATION_MEDIA_SHOULD_REACH_END']
            buildConfigField "String", "GAMIFICATION_POINTS_ANIMATION", "\"" + runtimeProps['GAMIFICATION_POINTS_ANIMATION'] + "\""
            buildConfigField "int", "DURATION_GAMIFICATION_POINTS_VIEW", runtimeProps['DURATION_GAMIFICATION_POINTS_VIEW']
            buildConfigField "int", "ADMIN_PASSWORD_OVERRIDE_VERSION", runtimeProps['ADMIN_PASSWORD_OVERRIDE_VERSION']
            buildConfigField "String", "ADMIN_PROTECT_INITIAL_PASSWORD", "\"" + runtimeProps['ADMIN_PROTECT_INITIAL_PASSWORD'] + "\""

            buildConfigField "String", "PAGE_COMPLETED_METHOD", "\"" + runtimeProps['PAGE_COMPLETED_METHOD'] + "\""
            buildConfigField "int", "PAGE_COMPLETED_TIME_SPENT", runtimeProps['PAGE_COMPLETED_TIME_SPENT']
            buildConfigField "int", "PAGE_COMPLETED_WPM", runtimeProps['PAGE_COMPLETED_WPM']
            buildConfigField "boolean", "PAGE_COMPLETION_VIEW_FILE", runtimeProps['PAGE_COMPLETION_VIEW_FILE']

            buildConfigField "int", "LOAD_CUSTOMFIELDS_VERSION", runtimeProps['LOAD_CUSTOMFIELDS_VERSION']

            buildConfigField "boolean", "START_COURSEINDEX_COLLAPSED", runtimeProps['START_COURSEINDEX_COLLAPSED']

            buildConfigField "String", "DEFAULT_REMINDER_INTERVAL", "\"" + runtimeProps['DEFAULT_REMINDER_INTERVAL'] + "\""
            buildConfigField "String", "DEFAULT_REMINDER_TIME", "\"" + runtimeProps['DEFAULT_REMINDER_TIME'] + "\""
            buildConfigField "String", "DEFAULT_REMINDER_DAYS", "\"" + runtimeProps['DEFAULT_REMINDER_DAYS'] + "\""

            buildConfigField "boolean", "SHOW_GAMIFICATION_EVENTS", runtimeProps['SHOW_GAMIFICATION_EVENTS']
            buildConfigField "boolean", "ALLOW_REGISTER_USER", runtimeProps['ALLOW_REGISTER_USER']

            buildConfigField "String", "INTERFACE_LANGUAGE_OPTIONS", "\"" + runtimeProps['INTERFACE_LANGUAGE_OPTIONS'] + "\""

            resValue "string", "MENU_ALLOW_LOGOUT_DEFAULT_VALUE", runtimeProps['MENU_ALLOW_LOGOUT']
            resValue "string", "MENU_ALLOW_COURSE_DOWNLOAD_DEFAULT_VALUE", runtimeProps['MENU_ALLOW_COURSE_DOWNLOAD']
            resValue "string", "MENU_ALLOW_LANGUAGE_DEFAULT_VALUE", runtimeProps['MENU_ALLOW_LANGUAGE']
            resValue "string", "START_COURSEINDEX_COLLAPSED", runtimeProps['START_COURSEINDEX_COLLAPSED']
            resValue "string", "prefServerDefault", runtimeProps['OPPIA_SERVER_DEFAULT']
            resValue "string", "oppiaServerHost", runtimeProps['OPPIA_SERVER_HOST']
            resValue "string", "oppiaServerDomain", runtimeProps['OPPIA_SERVER_DOMAIN']
            resValue "string", "prefAdminPasswordDefault", runtimeProps['ADMIN_PROTECT_INITIAL_PASSWORD']
            resValue "string", "prefGamificationPointsAnimationDefault", runtimeProps['GAMIFICATION_POINTS_ANIMATION']
            resValue "string", "prefDurationGamificationPointsViewDefault", runtimeProps['DURATION_GAMIFICATION_POINTS_VIEW']
            resValue "string", "SHOW_COURSE_DESCRIPTION", runtimeProps['SHOW_COURSE_DESCRIPTION']
            resValue "string", "prefCoursesReminderIntervalDefault", runtimeProps['DEFAULT_REMINDER_INTERVAL']
            resValue "string", "prefCoursesReminderTimeDefault", runtimeProps['DEFAULT_REMINDER_TIME']
            resValue "string", "prefCoursesReminderDaysDefaultSerialized", runtimeProps['DEFAULT_REMINDER_DAYS']
            resValue "string", "prefShowGamificationEventsDefault", runtimeProps['SHOW_GAMIFICATION_EVENTS']
            resValue "string", "prefUpdateActivityOnLoginDefault", runtimeProps['UPDATE_ACTIVITY_ON_LOGIN']

        }

        debug {
            multiDexEnabled true
            testCoverageEnabled = true
            debuggable = true
        }

        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
        animationsDisabled = true

        unitTests.all {
            jacoco {
                jacoco.includeNoLocationClasses = true
                jacoco.excludes = ['jdk.internal.*']
            }
        }

        managedDevices {
            devices {
                pixel2api30 (ManagedVirtualDevice) {
                    // Use device profiles you typically see in Android Studio.
                    device = "Pixel 2"
                    // ATDs currently support only API level 30.
                    apiLevel = 30
                    // You can also specify "google-atd" if you require Google Play Services.
                    systemImageSource = "aosp"
                }

                nexusSapi28 (ManagedVirtualDevice) {
                    device = "Nexus S"
                    apiLevel = 28
                    systemImageSource = "aosp"
                }

                nexus5api33 (ManagedVirtualDevice) {
                    device = "Nexus 5"
                    apiLevel = 33
                    systemImageSource = "google"
                }
            }


            groups {
                phones {
                    targetDevices.add(devices.nexus5api33)
                    targetDevices.add(devices.pixel2api30)
                    targetDevices.add(devices.nexusSapi28)
                }
            }

        }

    }

    flavorDimensions "main"

    productFlavors {
        normal { dimension "main" }
    }

    useLibrary 'android.test.mock'
    namespace 'org.digitalcampus.mobile.learning'

    android.buildFeatures.viewBinding = true
}

dependencies {
    def workVersion = '2.7.1'
    def roomVersion = "1.1.1"
    def fragmentVersion = '1.5.4'
    def daggerVersion = '2.41'
    def appcompatVersion = '1.6.0-rc01'
    def espressoVersion = '3.5.1'
    def kotlinVersion = '1.8.20'

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'joda-time:joda-time:2.10.13'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'com.google.android.flexbox:flexbox:3.0.0'

    implementation 'androidx.core:core:1.9.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.preference:preference:1.2.0'

    implementation "androidx.appcompat:appcompat:$appcompatVersion"

    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.navigation:navigation-fragment:2.5.3'
    implementation 'androidx.navigation:navigation-ui:2.5.3'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.concurrent:concurrent-futures:1.1.0'
    implementation "android.arch.persistence.room:runtime:$roomVersion"
    implementation "androidx.work:work-runtime:$workVersion"
    implementation 'com.google.guava:guava:31.1-android'

    androidTestImplementation "androidx.work:work-testing:$workVersion"
    annotationProcessor "android.arch.persistence.room:compiler:$roomVersion"

    implementation 'javax.xml.stream:stax-api:1.0'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.3'
    implementation 'ly.count.android:sdk:20.11.8'
    implementation 'io.github.inflationx:calligraphy3:3.1.1'
    implementation 'io.github.inflationx:viewpump:2.0.3'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    implementation 'com.mikhaellopez:circularprogressbar:3.1.0'
    implementation 'com.github.badoualy:stepper-indicator:1.0.7'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'com.hbb20:ccp:2.6.0' //Phone code picker

    //Dagger Dependencies
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-android-processor:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
    androidTestImplementation 'com.github.fabioCollini.daggermock:daggermock:0.8.5'

    implementation "com.squareup.inject:assisted-inject-annotations-dagger2:0.8.1"

    //JUnit Dependencies
    testImplementation 'androidx.test.ext:junit:1.1.5'
    testImplementation "org.json:json:20220924"

    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:4.9.3'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.annotation:annotation:1.3.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestUtil 'androidx.test:orchestrator:1.4.2'
    androidTestUtil 'androidx.test.services:test-services:1.4.2'

    //Espresso Dependencies
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-web:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation("androidx.test.espresso:espresso-contrib:$espressoVersion") {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
        exclude module: 'support-v13'
        exclude module: 'recyclerview-v7'
        exclude module: 'appcompat-v7'
    }

    // Fragment testing
    implementation "androidx.fragment:fragment:$fragmentVersion"
    debugImplementation 'androidx.test:core:1.5.0'
    debugImplementation "androidx.fragment:fragment-testing:1.5.4"

    //Mockito Dependencies
    testImplementation 'org.mockito:mockito-core:4.3.1'

    // Awaitility
    androidTestImplementation 'org.awaitility:awaitility:4.2.0'

    def multidex_version = "2.0.1"
    implementation "androidx.multidex:multidex:$multidex_version"
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    // Kotlin Dependencies
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
}


task grantPermissions(type: Exec, dependsOn: 'installNormalDebug') {
    group = 'test'
    description = 'Grant permissions for testing.'

    def adb = android.getAdbExe().toString()
    if (!System.getProperty('os.name').toLowerCase().contains('windows')) {
        logger.lifecycle('Granting permissions for a non windows os')
    } else {
        logger.lifecycle('Granting permissions for a windows os')
    }

    commandLine "${adb} shell pm grant ${android.defaultConfig.applicationId} android.permission.SET_ANIMATION_SCALE".split(' ')
    commandLine "${adb} shell pm grant ${android.defaultConfig.applicationId} android.permission.SET_ANIMATION_SCALE".split(' ')

}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('connectedAndroidTest') ||
            task.name.startsWith('connectedDebugAndroidTest') ||
            task.name.startsWith('assembleDebugAndroidTest') ||
            task.name.startsWith('assembleAndroidTest')) {
        task.dependsOn grantPermissions
    }
}

android.applicationVariants.all { variant ->
    boolean hasTest = gradle.startParameter.taskNames.find {it.contains("test") || it.contains("Test")} != null
    if (hasTest) {
        apply plugin: 'kotlin-allopen'
        allOpen {
            annotation('org.digitalcampus.oppia.annotations.Mockable')
        }
    }
}