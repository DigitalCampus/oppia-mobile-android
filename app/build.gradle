plugins {
    id "org.sonarqube" version "2.8"
}

sonarqube {
    properties {
        property "sonar.projectKey", "org.digitalcampus.mobile.learning"
        property "sonar.projectName", "Oppia-Android"
        property "sonar.projectVersion", "1.0"
        property "sonar.exclusions", "robospice/**/*"
        property "sonar.host.url", "https://sonarcloud.io"
        // TODO: - Setup your Sonarqube server address

        property "sonar.sources", "src/main/java"
        property "sonar.binaries", "build/intermediates/app_classes/normalDebug"
        property "sonar.java.binaries", "build/intermediates/app_classes/normalDebug"
        property "sonar.tests", "src/test/java, src/androidTest/java"
        property "sonar.java.test.binaries", "build/intermediates/app_classes/normalDebug"

        def unit = fileTree(dir: project.projectDir, includes: ['**/*.exec']).files
        def ui = fileTree(dir: project.projectDir, includes: ['**/*.ec']).files
        unit.addAll(ui)
        def files = unit.join(", ")

        property "sonar.coverage.jacoco.xmlReportPaths", files
        property "sonar.java.coveragePlugin", "jacoco-android"
        property "sonar.junit.reportsPath", "build/test-results/testDebugUnitTest"
        property "sonar.android.lint.report", "build/reports/lint-results.xml"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'jacoco-android'
apply plugin: "org.sonarqube"

repositories {
    maven { url "https://mint.splunk.com/gradle/" }
    maven { url "https://jitpack.io" }
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        versionCode 74
        versionName "7.0.4"

        applicationId "org.lastmilehealth.oppiamobile"
        minSdkVersion 14
        targetSdkVersion 28
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

//        multiDexEnabled true

    }

    //Add the version_name value to strings resources
    applicationVariants.all { variant ->
        variant.resValue "string", "version_name", variant.versionName
    }


    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'README.md'
    }

    lintOptions {
        checkReleaseBuilds true
        // Disable checks for String translations
        disable 'MissingTranslation', 'ExtraTranslation'
    }


    Properties runtimeProps = new Properties()
    runtimeProps.load(new FileInputStream(rootProject.file('oppia-default.properties')))

    def oppiaPropsFile = rootProject.file('custom.properties')
    if (oppiaPropsFile.canRead()) {
        logger.info('Fetching properties from external file')
        runtimeProps.load(new FileInputStream(oppiaPropsFile))
    } else {
        logger.error('No properties file found. Using default values.')
    }

    buildTypes {

        all {
            //Define all the constant values that depend on the config properties
            buildConfigField "String", "MINT_API_KEY", "\"" + runtimeProps['MINT_API_KEY'] + "\""
            buildConfigField "boolean", "ADMIN_PROTECT_SETTINGS", runtimeProps['ADMIN_PROTECT_SETTINGS']
            buildConfigField "boolean", "ADMIN_PROTECT_ACTIVITY_SYNC", runtimeProps['ADMIN_PROTECT_ACTIVITY_SYNC']
            buildConfigField "boolean", "ADMIN_PROTECT_ACTIVITY_EXPORT", runtimeProps['ADMIN_PROTECT_ACTIVITY_EXPORT']
            buildConfigField "boolean", "ADMIN_PROTECT_COURSE_DELETE", runtimeProps['ADMIN_PROTECT_COURSE_DELETE']
            buildConfigField "boolean", "ADMIN_PROTECT_COURSE_RESET", runtimeProps['ADMIN_PROTECT_COURSE_RESET']
            buildConfigField "boolean", "ADMIN_PROTECT_COURSE_INSTALL", runtimeProps['ADMIN_PROTECT_COURSE_INSTALL']
            buildConfigField "boolean", "ADMIN_PROTECT_COURSE_UPDATE", runtimeProps['ADMIN_PROTECT_COURSE_UPDATE']

            buildConfigField "boolean", "MENU_ALLOW_LOGOUT", runtimeProps['MENU_ALLOW_LOGOUT']
            buildConfigField "boolean", "MENU_ALLOW_MONITOR", runtimeProps['MENU_ALLOW_MONITOR']
            buildConfigField "boolean", "MENU_ALLOW_SETTINGS", runtimeProps['MENU_ALLOW_SETTINGS']
            buildConfigField "boolean", "MENU_ALLOW_LANGUAGE", runtimeProps['MENU_ALLOW_LANGUAGE']
            buildConfigField "boolean", "MENU_ALLOW_SYNC", runtimeProps['MENU_ALLOW_SYNC']
            buildConfigField "boolean", "MENU_ALLOW_COURSE_DOWNLOAD", runtimeProps['MENU_ALLOW_COURSE_DOWNLOAD']
            buildConfigField "boolean", "SESSION_EXPIRATION_ENABLED", runtimeProps['SESSION_EXPIRATION_ENABLED']
            buildConfigField "boolean", "OFFLINE_REGISTER_ENABLED", runtimeProps['OFFLINE_REGISTER_ENABLED']
            buildConfigField "int", "SESSION_EXPIRATION_TIMEOUT", runtimeProps['SESSION_EXPIRATION_TIMEOUT']
            buildConfigField "int", "DOWNLOAD_COURSES_DISPLAY", runtimeProps['DOWNLOAD_COURSES_DISPLAY']
            buildConfigField "boolean", "SHOW_COURSE_DESCRIPTION", runtimeProps['SHOW_COURSE_DESCRIPTION']

            buildConfigField "boolean", "METADATA_INCLUDE_NETWORK", runtimeProps['METADATA_INCLUDE_NETWORK']
            buildConfigField "boolean", "METADATA_INCLUDE_DEVICE_ID", runtimeProps['METADATA_INCLUDE_DEVICE_ID']
            buildConfigField "boolean", "METADATA_INCLUDE_SIM_SERIAL", runtimeProps['METADATA_INCLUDE_SIM_SERIAL']
            buildConfigField "boolean", "METADATA_INCLUDE_WIFI_ON", runtimeProps['METADATA_INCLUDE_WIFI_ON']
            buildConfigField "boolean", "METADATA_INCLUDE_NETWORK_CONNECTED", runtimeProps['METADATA_INCLUDE_NETWORK_CONNECTED']
            buildConfigField "boolean", "METADATA_INCLUDE_BATTERY_LEVEL", runtimeProps['METADATA_INCLUDE_BATTERY_LEVEL']
            buildConfigField "boolean", "METADATA_INCLUDE_GPS", runtimeProps['METADATA_INCLUDE_GPS']

            buildConfigField "String", "GAMIFICATION_MEDIA_CRITERIA", "\"" + runtimeProps['GAMIFICATION_MEDIA_CRITERIA'] + "\""
            buildConfigField "int", "GAMIFICATION_DEFAULT_MEDIA_THRESHOLD", runtimeProps['GAMIFICATION_DEFAULT_MEDIA_THRESHOLD']
            buildConfigField "String", "GAMIFICATION_POINTS_ANIMATION", "\"" + runtimeProps['GAMIFICATION_POINTS_ANIMATION'] + "\""
            buildConfigField "int", "DURATION_GAMIFICATION_POINTS_VIEW", runtimeProps['DURATION_GAMIFICATION_POINTS_VIEW']
            buildConfigField "int", "ADMIN_PASSWORD_OVERRIDE_VERSION", runtimeProps['ADMIN_PASSWORD_OVERRIDE_VERSION']
            buildConfigField "String", "ADMIN_PROTECT_INITIAL_PASSWORD", "\"" + runtimeProps['ADMIN_PROTECT_INITIAL_PASSWORD'] + "\""

            buildConfigField "boolean", "START_COURSEINDEX_COLLAPSED", runtimeProps['START_COURSEINDEX_COLLAPSED']
            resValue "string", "MENU_ALLOW_LOGOUT_DEFAULT_VALUE", runtimeProps['MENU_ALLOW_LOGOUT']
            resValue "string", "MENU_ALLOW_COURSE_DOWNLOAD_DEFAULT_VALUE", runtimeProps['MENU_ALLOW_COURSE_DOWNLOAD']
            resValue "string", "MENU_ALLOW_LANGUAGE_DEFAULT_VALUE", runtimeProps['MENU_ALLOW_LANGUAGE']
            resValue "string", "START_COURSEINDEX_COLLAPSED", runtimeProps['START_COURSEINDEX_COLLAPSED']
            resValue "string", "prefServerDefault", runtimeProps['OPPIA_SERVER_DEFAULT']
            resValue "string", "oppiaServerHost", runtimeProps['OPPIA_SERVER_HOST']
            resValue "string", "prefAdminPasswordDefault", runtimeProps['ADMIN_PROTECT_INITIAL_PASSWORD']
            resValue "string", "prefGamificationPointsAnimationDefault", runtimeProps['GAMIFICATION_POINTS_ANIMATION']
            resValue "string", "prefDurationGamificationPointsViewDefault", runtimeProps['DURATION_GAMIFICATION_POINTS_VIEW']
            resValue "string", "SHOW_COURSE_DESCRIPTION", runtimeProps['SHOW_COURSE_DESCRIPTION']

        }

        debug {
            testCoverageEnabled = true
            debuggable = true
        }


        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
        animationsDisabled = true

        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }


    flavorDimensions "main"

    productFlavors {
        normal { dimension "main" }
        admin { dimension "main" }
    }


    useLibrary 'android.test.mock'


}

// Setup Jacoco version. It's recomended way to exclude conflicts beetwen components
jacoco {
    toolVersion = "0.8.3"
}

// Setup jacoco report format. We need xml for Sonarqube
jacocoAndroidUnitTestReport {
    csv.enabled false
    html.enabled true
    xml.enabled true

}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'joda-time:joda-time:2.3'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.preference:preference:1.0.0'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'
    implementation 'com.splunk.mint:mint:5.0.0'
    implementation 'com.google.android:flexbox:0.2.5'
    implementation 'io.github.inflationx:calligraphy3:3.0.0'
    implementation 'io.github.inflationx:viewpump:1.0.0'

    //JUnit Dependencies
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.navigation:navigation-fragment:2.0.0'
    implementation 'androidx.navigation:navigation-ui:2.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:3.3.1'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    //Espresso Dependencies
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation('androidx.test.espresso:espresso-contrib:3.1.0') {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
        exclude module: 'support-v13'
        exclude module: 'recyclerview-v7'
        exclude module: 'appcompat-v7'
    }

    // Fragment testing
    def fragment_version = "1.1.0"
    implementation "androidx.fragment:fragment:$fragment_version"
    debugImplementation("androidx.fragment:fragment-testing:$fragment_version") {
        // exclude androidx.test:core while fragment_testing depends on 1.1.0
        exclude group: 'androidx.test', module: 'core'
    }
    //Mockito Dependencies
    androidTestImplementation 'org.mockito:mockito-core:1.10.19'
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'

    testImplementation 'org.mockito:mockito-core:2.4.0'
    testImplementation 'org.powermock:powermock-core:1.7.0RC2'
    testImplementation 'org.powermock:powermock-module-junit4:1.7.0RC2'
    testImplementation 'org.powermock:powermock-api-mockito2:1.7.0RC2'

//    androidTestImplementation 'org.powermock:powermock-mockito-release-full:1.6.4'
//    testImplementation 'org.powermock:powermock:1.6.6'

    //Dagger Dependencies
    implementation "com.google.dagger:dagger:2.11"
    implementation "com.google.dagger:dagger-android-support:2.11"
    annotationProcessor "com.google.dagger:dagger-android-processor:2.11"
    annotationProcessor "com.google.dagger:dagger-compiler:2.11"

//    implementation 'javax.annotation:jsr250-api:1.0' /*compileOnly*/
    implementation 'org.glassfish:javax.annotation:10.0-b28'
//    androidTestImplementation 'com.github.fabioCollini:DaggerMock:0.8.2'
    androidTestImplementation 'com.github.fabioCollini.daggermock:daggermock:0.8.5'

    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

    implementation 'com.mikhaellopez:circularprogressbar:3.0.3'
    implementation 'com.github.badoualy:stepper-indicator:1.0.7'

    def work_version = "2.2.0"
    implementation "androidx.work:work-runtime:$work_version"
    implementation 'androidx.concurrent:concurrent-futures:1.1.0-alpha01'
    androidTestImplementation "androidx.work:work-testing:$work_version"

    implementation 'javax.xml.stream:stax-api:1.0-2'

//    implementation 'androidx.multidex:multidex:2.0.1'
//    debugImplementation 'im.dino:dbinspector:3.4.1@aar'

}


task grantPermissions(type: Exec, dependsOn: 'installNormalDebug') {
    group = 'test'
    description = 'Grant permissions for testing.'

    def adb = android.getAdbExe().toString()
    if (!System.getProperty('os.name').toLowerCase().contains('windows')) {
        println "Granting permissions for a non windows os"
    } else {
        println "Granting permissions for a windows os"
    }

    commandLine "${adb} shell pm grant ${android.defaultConfig.applicationId} android.permission.SET_ANIMATION_SCALE".split(' ')
    // commandLine "${adb} shell pm grant org.digitalcampus.mobile.learning android.permission.SET_ANIMATION_SCALE --stacktrace".split(" ")

}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('connectedAndroidTest') ||
            task.name.startsWith('connectedDebugAndroidTest') ||
            task.name.startsWith('assembleDebugAndroidTest') ||
            task.name.startsWith('assembleAndroidTest')) {
        task.dependsOn grantPermissions
    }
}

// Test coverage tasks
def androidExclusion = [
        '**/databinding/**/*.*',
        '**/android/databinding/*Binding.*',
        '**/BR.*',
        '**/R.*',
        '**/R$*.*',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*_MembersInjector.*',
        '**/Dagger*Component.*',
        '**/Dagger*Component$Builder.*',
        '**/*Module_*Factory.*',
        '**/*Fragment*.*',
        '**/*Activity*.*',
        '**/*Adapter*.*',
        '**/*ViewPager*.*',
        '**/*ViewHolder*.*',
        '**/*Module*.*'
]

task codeCoverageReport(type: JacocoReport, dependsOn: 'testNormalDebugUnitTest') {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: 'build/intermediates/classes/normal/debug/org/digitalcampus',
            excludes: androidExclusion
    )
    sourceDirectories = files('src/main/java/org/digitalcampus')
    executionData = files('build/jacoco/testNormalDebugUnitTest.exec')
}

task getCoverage(type: Exec, dependsOn: 'codeCoverageReport') {
    group = "Reporting"
    //commandLine "open", "$buildDir/reports/jacoco/codeCoverageReport/html/index.html"
}
